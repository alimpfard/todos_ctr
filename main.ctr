#!/usr/bin/env ctr

import
  Library/Data/SwitchCase
  Library/Data/Json
  Library/Utils/Colors
  Library/Data/Map
  .

var config is Map new.
{
  var files is ['~/.config/ctodo.json', '/etc/ctodo.json'].
  files each_v: {:file
    file is File new: file.
    file exists ifTrue: {
      config is Json parse: file read.
    }, break.
  }.
} catch: { }, run.
var kill? is config at: 'kill-if-unlucky'.
var kill-wait is config at: 'kill-wait', or: 1.

var greetings is Map fromArray: [
  ['morning',
    [
      ['Rise and then go back to sleep, %{user}! for it is yet another boring day!', False],
      ['Good morning, %{user}!', False],
      ['Welcome to the land of the living, %{user}', False],
      ['...go back to sleep', False],
      ['Generations of threads died for this, feel ashamed %{user}, for you did this.', False]
    ] + [['DIE! DIE DIE DIE DIE!', True],,, kill?]
  ],
  ['noon',
    [
      ['Decent afternoon, probably too hot though!', False],
      ['Hello, %{user}! it\'s nap time!', False],
      ['AHHHHHHHHHHHH Help me, %{user}! I\'m melting!', False],
      ['Why hello there, %{user}! now shoo', False],
      ['go away', False]
    ] + [['daga kotowaru!', True],,, kill?]
  ],
  ['night',
    [
      ['Ah! such a nice night, How do you do %{user}?', False],
      ['Night time is the best after all!', False],
      ['Who needs sleep? %{user}? WEAK.', False],
      ['DELET THIS NOW! -- type `exit\'', False],
      ['How do you do?', False]
    ] + [['This program has performed an illegal operation and will now be shut down', True],,, kill?]
  ]
].

var get_greet is {\:user:time :hour :greet
  hour is time hour.
  time is 'night'.
  (hour < 12) & (hour > 5) ifTrue: { time is 'morning'. }.
  (hour < 20) & (hour >=: 12) ifTrue: { time is 'noon'. }.
  greet is greetings at: time.
  ^greet at: (Dice rollWithSides: greet count).
}.

var greet is {\:user:time:greet
  greet is get_greet[user, time].
  Pen write: Colors % [(greet at: 0, %~: (Map new put: user at: 'user')), \cyan, \italic].
  Pen writeln: Colors % [' It\'s %s!' % [(time format: '%a %r')], \red, \bold].
  greet at: 1, ifTrue: {
    Clock wait: kill-wait sec.
    Program cnew: {
      pid => Inject run: 'int main() { return getppid(); }' arguments: [].
    }, signal: 9.
  }.
}.

var DEFAULT_SAVE_DIR is config at: 'save_dir', or: '~/todos'.
var DEFAULT_SAVE_FILE is config at: 'save_name', or: '.todos.save'.

var Todo is Object cnew: {:self
  sessionlog => Array new.
  gitDirF => File new: DEFAULT_SAVE_DIR.
  # my gitDirF exists ifFalse: {
  #   my gitDirF mkdir.
  #   self gitInit.
  # }.
  gitDir => my gitDirF realPath.
  savename => DEFAULT_SAVE_FILE.
  save => File new: DEFAULT_SAVE_DIR + '/' + DEFAULT_SAVE_FILE.
  my save exists ifFalse: {
    my save write: '[]'.
    self gitAdd: [my savename].
  }.
  dirty => False.
  todos => Json parse: my save read.
}.

Todo on: 'save' do: { ^my save. }.

Todo on: 'new:name:' do: {:save_path:savename
  ^cnew: {
    sessionlog => Array new.
    gitDirF => File new: save_path.
    # my gitDirF exists ifFalse: {
    #   my gitDirF mkdir.
    #   self gitInit.
    # }.
    gitDir => my gitDirF realPath.
    savename => savename.
    save => File new: save_path + '/' + savename.
    my save exists ifFalse: { my save write: '[]'. }.
    dirty => False.
    todos => Json parse: my save read.
  }.
}.

Todo on: 'new' do: {
  ^new: const DEFAULT_SAVE_DIR name: const DEFAULT_SAVE_FILE.
}.

Todo on: 'clear' do: { Pen clear. }.

Todo on: 'commit' do: {:self :val
  my dirty ifFalse: \:_ self.
  val is Json serialize: my todos.
  my save write: val.
  self gitAdd gitCommit: 'modification :: ${{my sessionlog fmap: {\:x '%s %s (%s)' % x}, join: '; '}}$'.
  dirty => False.
  my sessionlog is Array new.
}.

Todo on: 'git' do: {:self:*cmd
  Shell git: (cmd join: ' ').
}.

Todo on: 'gitInit' do: {
    var dir is '\'' + (my gitDir escape: '\'') + '\''.
    Shell mkdir: '-p $$dir'.
    Shell git: 'init $$dir'.
}.

Todo on: 'gitAdd:' do: {:*files
    var cw is Program changeDirectory: my gitDir.
    Shell git: 'add ' + (files fmap: (\:x '\'' + (x escape: '\'') + '\''), join: ' ').
    Program changeDirectory: cw.
}.

Todo on: 'gitAdd' do: {:self
  self gitAdd: my savename.
}.

Todo on: 'gitCommit:' do: {:msg
    var cw is Program changeDirectory: my gitDir.
    Shell git: 'commit -m \'' + (msg escape: '\'') + '\''.
    Program changeDirectory: cw.
}.

Todo on: 'gitPush' do: {
    var cw is Program changeDirectory: my gitDir.
    Shell git: 'push'.
    Program changeDirectory: cw.
}.

Todo on: 'gitPull' do: {
    var cw is Program changeDirectory: my gitDir.
    Shell git: 'pull'.
    Program changeDirectory: cw.
}.

Todo on: 'sync' do: {:self
  self gitPull gitPush.
}.

Todo on: 'import' do: {:giturl
  var gitdir is '\'${{my gitDir escape: '\''}}$\''.
  Shell rm: '-r $$gitdir'.
  Shell git: 'clone \'${{giturl escape: '\''}}$\' $$gitdir'.
}.

Todo on: 'getOrCreate' do: {:self
  self commit.
}.

var colorize is {:map :color:resolved:pr
  pr is map at: 'pr'.
  resolved is map at: 'resolved'.
  color is (pr
    case: 1 do: \:_ [\white],
    case: 2 do: \:_ [\cyan],
    case: 3 do: \:_ [\magenta],
    case: 4 do: \:_ [\red],
    default: (\:_ pr < 0 either: [\white] or: [\red, \bold]),
    switch).
  resolved either: { color is color + [\hide]. } or: {}.
  ^Colors % ([map @ 'todo'] + color reverse).
}.

Todo on: 'display' do: {:self
  my todos count = 0 ifTrue: {
    Pen green writeln: '[Todos] Nothing left to do! You might as well commit suicide now', resetColor.
    ^self.
  }.
  Pen write: Colors % ['[Todo] Current todo list:\n', \magenta, \bold].
  Pen writeln: (my todos imap: \:i:v '  %s. %d -> %s' % [i + 1, (v @ 'pr'), colorize[v]], join: '\n').
}.

Todo on: 'execute:' do: {:command :cmd :args
  {
    cmd is command split: ' ' max: 1.
    args is cmd pop.
    cmd is cmd head.
  } catch: {
    cmd is command.
    args is ''.
  }, run.
  my sessionlog push: [cmd, args, Clock new].
  ^message: cmd arguments: [args].
}.

Todo on: 'add' do: {:args
  args @ 0 = '+' either: {
    args is args skip: 1, split: ' ' max: 1.
    {
      args put: args head toNumber at: 0.
    } catch: {
      Pen red writeln: (args head) + ' is not a number', resetColor.
      args put: 1 at: 0.
    }, run.
  } or: {
    args is [1, args].
  }.
  my todos push: (Map new put: False at: 'resolved', put: args last at: 'todo', put: args head at: 'pr').
  my dirty is True.
  Pen magenta writeln: ('Added %d -> "%s"' % args).
}.

Todo on: 'resolve' do: {:args :idxs:arg
    idxs is args trim split: ',', fmap: \:x x trim toNumber.
    var todos is my todos.
    var dirty is my dirty.
    idxs each_v: {:idx
        idx -=: 1.
        arg is todos at: idx.
        arg put: True at: 'resolved'.
        todos put: arg at: idx.
        Pen magenta writeln: 'Set %s to resolved' % [arg @ 'todo'].
    }.
    my dirty is True.
}.

Todo on: 'unresolve' do: {:args :idxs:arg
    idxs is args trim split: ',', fmap: \:x x trim toNumber.
    var todos is my todos.
    idxs each_v:{ :idx
        idx -=: 1.
        arg is todos at: idx.
        arg put: False at: 'resolved'.
        todos put: arg at: idx.
        Pen magenta writeln: 'Set %s to unresolved' % [arg @ 'todo'].
    }.
    my dirty is True.
}.
Todo on: 'remove' do: {:args :arg
  var todo_count is my todos count.
  {
    arg is args trim toNumber.
    (arg > todo_count) | (arg < 1) ifTrue: { thisBlock error: arg. }.
    ^True.
  } catch: {
    Pen red writeln: 'What the heck is %s? (expecting number >= %d and number < %d)' % [args, 1, todo_count].
    ^False.
  }, run ifFalse: \:_ Nil.
  args is my todos pop: arg - 1.
  my dirty is True.
  Pen magenta writeln: ('Removed %{pr} -> "%{todo}"' %~: args).
}.

Todo on: 'list' do: {
  display.
}.

['respondTo:', 'respondTo:and:'] each_v: {:v
  Todo on: v do: {:msg:*args
    Pen red writeln: 'Unknown command $$msg'.
  }.
}.

var __help is
'Yet Another Todos App [YATA?]
usage:
  <executable_name> [command] [args] [options]
commands:
  add [+priority] <text>  --  add a todo entry
  remove <idx>            --  remove an entry
  resolve <idx>,+         --  set some entries as resolved
  unresolve <idx>,+       --  set some entries as unresolved
  list                    --  list the current todos
  display                 --  alias for list
  commit                  --  flush into save (automatically done at exit)
  git <git command>       --  directly execute git commands on the git dir
  import <url>            --  import a git url [warning: will remove the old data]
  help                    --  this thing
options:
  -i                      -- interative mode'.

var cliargs is Array new fill: Program argCount with: (\:i Program argument: i), do shift shift done.
var todo is Todo getOrCreate. #TODO: add customizable save paths.
var main is {
  var input is Nil.
  var exit is False.
  var options is Map new
    put: False at: 'should_interact',
    put: True  at: 'with_color'.
  # DEFS GO HERE
  var cmdbuffer is process_args[cliargs, options].
  cmdbuffer !=: '', either: {
    todo execute: cmdbuffer.
  } or: {
    greet[(Program env: 'USER', or: 'master') upper1st, (Clock new zone: 'Asia/Tehran')].
    todo display.
    options at: 'should_interact', ifTrue: {
      Pen magenta writeln: 'Interactive mode, write command or \'help\'', resetColor.
      {^exit.} whileFalse: {
        Pen green write: '> ', resetColor.
        input is Program waitForInput trim.
        input
          case: 'exit' do: { exit is True. ^True. },
          case: 'help' do: { Pen writeln: __help. ^True. },
          default: { ^False. },
          switch ifFalse: ({
            todo execute: input.
          } catch: {:e Pen red writeln: 'Error: $$e'. }).
      }.
    }.
  }.
  todo commit.
}.

var process_args is {:args:opts :cmdbuffer
  cmdbuffer is ''.
  args each: {:i:arg
    arg
      case: '-i' do: { opts put: True at: 'should_interact'. },
      default: { cmdbuffer +=: arg + ' '. },
      switch.
  }.
  ^cmdbuffer rightTrim.
}.

{
  main[].
  todo commit.
} catch: {:e
  todo commit.
  #Pen red writeln: e.
  thisBlock error: e.
}, run.
